use std::collections::hash_map::DefaultHasher;
use std::hash::{Hash, Hasher};

struct MyHashMap<K, V> {
    data: Vec<Vec<(K, V)>>,
    capacity: usize,
}

impl<K, V> MyHashMap<K, V>
where
    K: Eq + Hash,
{
    fn new() -> Self {
        Self {
            data: vec![Vec::new(); 16],
            capacity: 16,
        }
    }

    fn insert(&mut self, key: K, value: V) {
        let index = self.get_index(&key);
        for pair in &self.data[index] {
            if pair.0 == key {
                return;
            }
        }
        self.data[index].push((key, value));
    }

    fn get(&self, key: &K) -> Option<&V> {
        let index = self.get_index(key);
        for pair in &self.data[index] {
            if pair.0 == *key {
                return Some(&pair.1);
            }
        }
        None
    }

    fn remove(&mut self, key: &K) -> Option<V> {
        let index = self.get_index(key);
        let mut remove_index = None;
        for (i, pair) in self.data[index].iter().enumerate() {
            if pair.0 == *key {
                remove_index = Some(i);
                break;
            }
        }
        if let Some(i) = remove_index {
            Some(self.data[index].remove(i).1)
        } else {
            None
        }
    }

    fn get_index(&self, key: &K) -> usize {
        let mut hasher = DefaultHasher::new();
        key.hash(&mut hasher);
        (hasher.finish() as usize) % self.capacity
    }
}